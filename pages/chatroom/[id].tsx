import type { NextPageContext } from "next";
import Head from "next/head";
import ChatInput from "../../common/component/ChatInput";
import ChatHistoryWindow from "../../common/component/ChatHistoryWindow";
import { useEffect, useState } from "react";
import { useRecoilState, useSetRecoilState } from "recoil";
import {
  LastReciveMessagesType,
  chatRoomInformationState,
  chatRoomMessagesState,
  lastReciveMessagesState,
} from "../../states/chatState";
import { ChatRoomType, MessageType } from "../../types/chat";
import { Navigation } from "../../common/component/Navigation";
import ChatUserList from "../../common/component/ChatUserList";
import { useMessages } from "../../common/hooks/chatting";
import SettingView from "../../common/component/SettingView";
import {Socket, io} from 'socket.io-client';

let socket:Socket ;

const ChatRoomPage = ({
  roomData,
  chatHistory,
}: {
  roomData: ChatRoomType;
  chatHistory: MessageType[];
}) => {

  const setRoomInformation = useSetRecoilState(chatRoomInformationState);
  const setChatMessages = useSetRecoilState(chatRoomMessagesState);
  const [socketState, setScoketState] = useState<Socket>();
  const [receiveMessage, setReceiveMessage] =
  useRecoilState<LastReciveMessagesType>(lastReciveMessagesState);

  useEffect( ()=>{
    setRoomInformation(roomData);
  }, [roomData, setRoomInformation]);
  
  useEffect(() => {
    const currentReceiveData = {
      [roomData.id]: {
        lastIndex: -1,
        timestamp: Date.now(),
      },
    };

    if (chatHistory.length > 0) {
      const data = chatHistory[chatHistory.length - 1];
      currentReceiveData[roomData.id].lastIndex = data.index;
      if (data.timestamp)
        currentReceiveData[roomData.id].timestamp = data.timestamp;
    }

    setChatMessages(chatHistory);
    setReceiveMessage({
      ...receiveMessage,
      ...currentReceiveData,
    });

  }, [chatHistory]);
  
  const { sendMessage } = useMessages(roomData);


  // 소켓 연결
  useEffect(() => {
      var socket: any;
    socket = io("http://localhost:3001");
    socket.emit("join_room", roomData.id);
    setScoketState(socket);
    // const socketInitializer = async () => {
    //   await fetch('/api/socket');
    //   socket = io();

    //   socket.on('connect', () => {
    //     console.log('connected', socket);
    //     // setConnected(true);
    //   });

    //   socket.on('error', (error: any) => {
    //     console.log(error);
    //   });

    //   socket.on('message', (message: any) => {
    //     console.log("message" , message)
    //   });
    // };
    // socketInitializer();

    // 브라우저가 꺼지면 소켓 연결 종료
    return () => {
      if (socket) {
        socket.disconnect();
      }
    };
  }, []);

  const handleMessage = async (message: MessageType) =>{
    // const response = await axios.post("/api/chat", message);
    if (socketState)
      socketState.emit("send_msg", message);
    sendMessage(message);
  }

  return (
    <div >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <Navigation title={roomData.name}/>
        <ChatHistoryWindow/>
        <ChatInput sendMessage={handleMessage} />
      </main>
      <SettingView/>
      <ChatUserList/>
    </div>
  );
};

ChatRoomPage.getInitialProps = async (ctx: NextPageContext) => {
  const id = ctx.query.id;
  const res = await fetch(`http://localhost:3000/api/chatroom?id=${id}`);
  const roomData = await res.json();
  const chatHistoryRes = await fetch(`http://localhost:3000/api/chathistory?id=${id}`);
  const chatHistory = await chatHistoryRes.json();

  return { roomData: roomData, chatHistory: chatHistory };
};

export default ChatRoomPage;
